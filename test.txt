import * as anchor from "@coral-xyz/anchor";
import { Program } from "@coral-xyz/anchor";
import { Soondex } from "../target/types/soondex"; // Replace with your program's type
import { PublicKey, Keypair, SystemProgram } from "@solana/web3.js";
import { TOKEN_PROGRAM_ID, ASSOCIATED_TOKEN_PROGRAM_ID } from "@solana/spl-token";
import { assert } from "chai";

describe('Soondex Liquidity Pool Tests', () => {
  const provider = anchor.AnchorProvider.env();
  anchor.setProvider(provider);
  const program = anchor.workspace.Soondex as Program<Soondex>;

  // Variables
  let pool: PublicKey;
  let payer = Keypair.generate();
  let userTokenXAccount: PublicKey;
  let userTokenYAccount: PublicKey;
  let poolTokenXAccount: PublicKey;
  let poolTokenYAccount: PublicKey;
  let tokenXMint: PublicKey;
  let tokenYMint: PublicKey;

  // Initialize the pool and token accounts before tests
  before(async () => {
    // Set the mints for token X and Y (replace with actual mint addresses)
    tokenXMint = new PublicKey("TokenX_Mint_Address");  // Example, replace with actual mint address
    tokenYMint = new PublicKey("TokenY_Mint_Address");  // Example, replace with actual mint address

    // Derive the PDA for the pool account
    const POOL_SEED = Buffer.from("pool"); // Must match the seed used in the Rust program
    const [derivedPool] = PublicKey.findProgramAddressSync([POOL_SEED], program.programId);
    pool = derivedPool;

    // Initialize user token accounts
    [userTokenXAccount, userTokenYAccount] = await Promise.all([
      anchor.utils.token.associatedAddress({
        mint: tokenXMint,
        owner: payer.publicKey
      }),
      anchor.utils.token.associatedAddress({
        mint: tokenYMint,
        owner: payer.publicKey
      })
    ]);

    // Initialize pool token accounts
    [poolTokenXAccount, poolTokenYAccount] = await Promise.all([
      anchor.utils.token.associatedAddress({
        mint: tokenXMint,
        owner: pool
      }),
      anchor.utils.token.associatedAddress({
        mint: tokenYMint,
        owner: pool
      })
    ]);
  });

  it('Initialize liquidity pool', async () => {
    // Initialize liquidity pool by calling the program's method
    const tx = await program.methods
      .initializePool(
        new anchor.BN(100), // fee_rate
        new anchor.BN(10)    // reward_rate
      )
      .accounts({
        pool: pool, // PDA derived pool account
        payer: payer.publicKey, // Payer's public key
        systemProgram: SystemProgram.programId, // System program for creating accounts
        tokenProgram: TOKEN_PROGRAM_ID, // Token program
        associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID, // Associated token program
        tokenXMint, // Token X mint
        tokenYMint, // Token Y mint
        poolTokenXAccount, // Pool's Token X account
        poolTokenYAccount, // Pool's Token Y account
      })
      .signers([payer]) // Sign with payer
      .rpc(); // Send the transaction

    // Fetch the pool state after initialization
    const poolState = await program.account.pool.fetch(pool);

    // Check the pool's state to ensure it was initialized correctly
    assert.equal(poolState.feeRate.toNumber(), 100, "Fee rate should be initialized correctly");
    assert.equal(poolState.rewardRate.toNumber(), 10, "Reward rate should be initialized correctly");
  });

});
